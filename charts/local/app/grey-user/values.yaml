# Default values for grey-dev-svc-user.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: greyhats13/grey-svc-user
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

appConfig:
  AWS_REGION: "ap-southeast-1"
  DYNAMODB_TABLE: "grey-svc-user"
  REDIS_ADDR: "redis-master.redis.svc.cluster.local:6379"
  REDIS_DB: "0"
  REDIS_TTL: "3600"
  PORT: "8080"
  LOCAL_STACK_ENDPOINT: "http://localstack.localstack.svc.cluster.local:4566"

# appSecret: {}
#   secrets:
#     APP_NAME: "grey-svc-user" #dummy value

externalSecrets:
  enabled: true
  refreshInterval: "1h"
  secretStoreName: "aws-secretsmanager"
  secretStoreKind: "ClusterSecretStore"
  creationPolicy: "Owner"
  deletionPolicy: "Delete"
  data:
    REDIS_PASSWORD:
      key: "grey/svc/user"
      property: "REDIS_PASSWORD"
      version: "AWSCURRENT"
    AWS_ACCESS_KEY_ID:
      key: "grey/svc/user"
      property: "AWS_ACCESS_KEY_ID"
      version: "AWSCURRENT"
    AWS_SECRET_ACCESS_KEY:
      key: "grey/svc/user"
      property: "AWS_SECRET_ACCESS_KEY"
      version: "AWSCURRENT"

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: /metrics
  prometheus.io/port: "8080"

# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "nginx"
  annotations:
    external-dns.alpha.kubernetes.io/hostname: "user.lokal.blast.co.id"
    external-dns.alpha.kubernetes.io/ttl: "300"
    external-dns.alpha.kubernetes.io/target: "127.0.0.1"
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-grey"
  hosts:
    - host: user.lokal.blast.co.id
      paths:
        - path: /v1/user
          pathType: Prefix
  tls:
    - secretName: grey-svc-user-tls
      hosts:
        - user.lokal.blast.co.id

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 100m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 256Mi

# # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# livenessProbe:
#   httpGet:
#     path: /v1/user/healthcheck
#     port: http
#     scheme: HTTP
#   initialDelaySeconds: 30
#   periodSeconds: 10
#   timeoutSeconds: 5
#   failureThreshold: 3

# readinessProbe:
#   httpGet:
#     path: /v1/user/healthcheck
#     port: http
#     scheme: HTTP
#   initialDelaySeconds: 5
#   periodSeconds: 10
#   timeoutSeconds: 5
#   failureThreshold: 3

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 20
  targetCPUUtilizationPercentage: 75
  targetMemoryUtilizationPercentage: 75

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

podDisruptionBudget:
  enabled: true
  minAvailable: 1